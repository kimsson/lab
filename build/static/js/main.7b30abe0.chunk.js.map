{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","loaded","content","step","link","playStatus","Sound","status","PLAYING","position","volume","playbackRate","loop","song","_this2","renderContent","split","appClassName","ClassNames","App-fadeIn","linkClassName","App-link","App-link-hidden","_this$state","react_default","a","createElement","className","onClick","setState","length","fadeInterval","setInterval","clearInterval","lib_default","url","onLoading","_ref","bytesLoaded","bytesTotal","console","log","concat","onLoad","setTimeout","onPlaying","_ref2","onPause","onResume","onStop","onFinishedPlaying","STOPPED","href","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qSAuFeA,cAhFb,SAAAA,EAAaC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAClBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,QAAQ,EACRC,QAAS,kGACTC,KAAM,EACNC,MAAM,EACNC,WAAYC,IAAMC,OAAOC,QACzBC,SAAU,EACVC,OAAQ,IACRC,aAAc,EACdC,MAAM,EACNC,KAAM,IAZUpB,wEAgBX,IAAAqB,EAAAlB,KACDmB,EAAgB,kBAAMD,EAAKd,MAAME,QAAQc,MAAM,MAE/CC,EAAeC,IAAW,CAC9B3B,KAAO,EACP4B,aAAcvB,KAAKI,MAAMC,SAErBmB,EAAgBF,IAAW,CAC/BG,YAAY,EACZC,mBAAoB1B,KAAKI,MAAMI,OAT1BmB,EAY0E3B,KAAKI,MAA9EK,EAZDkB,EAYClB,WAAYI,EAZbc,EAYad,SAAUC,EAZvBa,EAYuBb,OAAQC,EAZ/BY,EAY+BZ,aAAcC,EAZ7CW,EAY6CX,KAAMC,EAZnDU,EAYmDV,KAAMV,EAZzDoB,EAYyDpB,KAAMF,EAZ/DsB,EAY+DtB,OACtE,OACEuB,EAAAC,EAAAC,cAAA,OAAKC,UAAWV,EAAcW,QAAS,WAErC,GADU,IAAPzB,GAAUW,EAAKe,SAAS,CAAChB,KAAM,oDAC/BV,GAAQY,IAAgBe,OAAO,EAAlC,CACEhB,EAAKe,SAAS,CAAEzB,MAAM,IACtB,IAAM2B,EAAeC,YAAY,WACdlB,EAAKd,MAAhBU,QACO,EACXuB,cAAcF,GAGhBjB,EAAKe,SAAS,CAACnB,OAAQI,EAAKd,MAAMU,OAAO,KAExC,SAGLI,EAAKe,SAAS,CAAC1B,KAAMW,EAAKd,MAAMG,MAAM,MAGpCqB,EAAAC,EAAAC,cAACQ,EAAAT,EAAD,CACEU,IAAKtB,EACLR,WAAYA,EACZI,SAAUA,EACVC,OAAQA,EACRC,aAAcA,EACdC,KAAMA,EACNwB,UAAW,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,YAAaC,EAAhBF,EAAgBE,WAAhB,OAAiCC,QAAQC,IAAR,GAAAC,OAAeJ,EAAcC,EAAa,IAA1C,cAC5CI,OAAQ,WACNC,WAAW,WACT9B,EAAKe,SAAS,CAAC5B,QAAQ,EAAME,KAAM,KAAM,KAC3CqC,QAAQC,IAAI,WAEdI,UAAW,SAAAC,GAAA,IAAGrC,EAAHqC,EAAGrC,SAAH,OAAkBK,EAAKe,SAAS,CAAEpB,cAC7CsC,QAAS,kBAAMP,QAAQC,IAAI,WAC3BO,SAAU,kBAAMR,QAAQC,IAAI,YAC5BQ,OAAQ,kBAAMT,QAAQC,IAAI,YAC1BS,kBAAmB,kBAAMpC,EAAKe,SAAS,CAAExB,WAAYC,IAAMC,OAAO4C,aAEtE3B,EAAAC,EAAAC,cAAA,UAAQC,UAAU,2BACR,IAATxB,EACCqB,EAAAC,EAAAC,cAAA,0BAEAF,EAAAC,EAAAC,cAAA,UAAKzB,GAAUc,IAAgBnB,KAAKI,MAAMG,OAE1CqB,EAAAC,EAAAC,cAAA,KAAGC,UAAWP,EAAegC,KAAK,qBAAlC,mBA3EQC,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpC,EAAAC,EAAAC,cAACmC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.7b30abe0.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport ClassNames from 'classnames';\nimport Sound from 'react-sound';\n\nclass App extends Component {\n  \n  constructor (props) {\n    super(props);\n    this.state = {\n      loaded: false,\n      content: ' Iraida Grattis Vill du gÃ¥ pÃ¥ bio ? I sÃ¥ fall klicka hÃ¤r fast nedanfÃ¶r haha hihi',\n      step: 0,\n      link: false,\n      playStatus: Sound.status.PLAYING,\n      position: 0,\n      volume: 100,\n      playbackRate: 1,\n      loop: false,\n      song: '',\n    }\n  }\n  \n  render() {\n    const renderContent = () => this.state.content.split(\" \");\n\n    const appClassName = ClassNames({\n      'App': true,\n      'App-fadeIn': this.state.loaded,\n    })\n    const linkClassName = ClassNames({\n      'App-link': true,\n      'App-link-hidden': !this.state.link\n    })\n    \n    const { playStatus, position, volume, playbackRate, loop, song, step, loaded } = this.state;\n    return (\n      <div className={appClassName} onClick={()=> {\n        if(step===0) this.setState({song: 'http://kimsson.com/iry/sounds/arabiannights.mp3'});\n        if(step >= renderContent().length-1) {\n          this.setState({ link: true })\n          const fadeInterval = setInterval(() => {\n            let { volume } = this.state;\n            if(volume <= 0) {\n              clearInterval(fadeInterval);\n              return;\n            }\n            this.setState({volume: this.state.volume-1});\n\n          }, 25);\n          return;\n        }\n        this.setState({step: this.state.step+=1});}\n\n        }>\n          <Sound\n            url={song}\n            playStatus={playStatus}\n            position={position}\n            volume={volume}\n            playbackRate={playbackRate}\n            loop={loop}\n            onLoading={({ bytesLoaded, bytesTotal }) => console.log(`${bytesLoaded / bytesTotal * 100}% loaded`)}\n            onLoad={() => {\n              setTimeout(() => {\n                this.setState({loaded: true, step: 1})}, 200);\n              console.log('Loaded');\n            }}\n            onPlaying={({ position }) => this.setState({ position })}\n            onPause={() => console.log('Paused')}\n            onResume={() => console.log('Resumed')}\n            onStop={() => console.log('Stopped')}\n            onFinishedPlaying={() => this.setState({ playStatus: Sound.status.STOPPED })}\n          />\n        <header className=\"App-header App-noselect\">\n        {step === 0 ? (\n          <h2>ðŸ¦„</h2>\n        ):(\n          <h1>{loaded && renderContent()[this.state.step]}</h1>\n        )} \n          <a className={linkClassName} href=\"tel:0046739036967\">Ta da!</a>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
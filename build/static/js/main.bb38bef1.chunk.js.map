{"version":3,"sources":["constants/keys.js","serviceWorker.js","index.js","App.js"],"names":["TRAFIKLAB_REALTIME_DEPATURE","TRAFIKLAB_SEARCHABLE_STOPS","Boolean","window","location","hostname","match","ReactDOM","render","react_default","a","createElement","props","_useState","useState","_useState2","Object","slicedToArray","query","setQuery","_useState3","_useState4","isLoading","setIsLoading","_useState5","_useState6","isError","setIsError","_useState7","departures","_useState8","setDepatures","useEffect","_ref","asyncToGenerator","regenerator_default","mark","_callee","timeWindow","siteURL","siteResult","siteId","depatureURL","depatureResult","wrap","_context","prev","next","concat","axios","headers","dataType","sent","undefined","data","ResponseData","SiteId","abrupt","t0","stop","apply","this","arguments","fetchData","compareDates","date","duration","moment","diff","Date","Math","floor","asMinutes","renderType","Container","className","Modal","Header","type","value","onChange","event","target","ListGroup","Metros","map","departure","index","Item","variant","ExpectedDateTime","key","toString","console","log","Destination","format","fromNow","Alert","Heading","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bb38bef1.chunk.js","sourcesContent":["export const TRAFIKLAB_REALTIME_DEPATURE = '939e5f6ae8274cf6b6469d39439cbe26';\nexport const TRAFIKLAB_NEARBY_STOPS = '7bf1b964fdf3488683746bcd66f792bf';\nexport const TRAFIKLAB_SEARCHABLE_STOPS = '619aa68078dd475a8e5333b23e7c7aa4';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport moment from 'moment';\nimport { Alert, Container, Modal, ListGroup } from 'react-bootstrap';\n\nimport { TRAFIKLAB_REALTIME_DEPATURE, TRAFIKLAB_SEARCHABLE_STOPS } from './constants/keys';\nimport 'react-day-picker/lib/style.css';\nimport './App.css';\n// import ClassNames from 'classnames';\n// import Sound from 'react-sound'; \n\nexport default function App(props) {\n  \n\n  const [query, setQuery] = useState('Hammarbyhojden');\n\n  const [isLoading, setIsLoading] = useState(false);\n\n  const [isError, setIsError] = useState(false);\n\n  const [departures, setDepatures] = useState({departures: {}});\n\n  useEffect(() => {\n    const fetchData = async () => {\n      setIsLoading(true);\n      setIsError(false);\n\n      const maxResults = 10;\n      const timeWindow = 20;\n      const siteURL = `https://api.sl.se/api2/typeahead.jsonp?key=${TRAFIKLAB_SEARCHABLE_STOPS}&searchstring=${query}&stationsonly=${true}&maxresults=${maxResults}`;\n      \n      try {\n        const siteResult = await axios(\n          siteURL,\n          {\n            headers: {\n              dataType: 'jsonp',\n            }\n          }\n        );\n        const siteId = siteResult.data.ResponseData[0].SiteId;\n        if(siteId === undefined) return;\n        \n        const depatureURL = `https://api.sl.se/api2/realtimedeparturesV4.jsonp?key=${TRAFIKLAB_REALTIME_DEPATURE}&siteid=${siteId}&timewindow=${timeWindow}`;\n        const depatureResult = await axios(\n          depatureURL,\n          {\n            headers: {\n              dataType: 'jsonp',\n            }\n          }\n        );\n        setDepatures(depatureResult);\n      } catch(error) {\n        setIsError(true)\n      }\n      setIsLoading(false);\n    };\n    fetchData();\n  }, [query]);\n  \n  const compareDates = (date) => {\n    let duration = moment.duration(moment(date).diff(new Date()));\n\n    let diff = Math.floor(duration.asMinutes());\n    let renderType = \"success\";\n\n    if(diff < 11 ) renderType = \"warning\";\n    if(diff < 5 ) renderType = \"danger\";\n    \n    return renderType;\n  }\n\n  return (\n    <Container className=\"\">\n      <Modal.Header className=\"\">\n        <h1>Avgångar från </h1>\n        <input\n          type=\"text\"\n          value={query}\n          onChange={event => setQuery(event.target.value)} \n        />\n      </Modal.Header>\n      <div className=\"\">\n        { isLoading ? (<div>Loading ...</div>) : (\n          <div>\n            { departures.data ?  (\n              <ListGroup>\n              { departures.data.ResponseData.Metros.map((departure, index) => (\n                  <ListGroup.Item variant={compareDates(departure.ExpectedDateTime)} key={index.toString()} >\n                    {console.log(compareDates(departure.ExpectedDateTime))}\n                    <p>{`${departure.Destination} ${moment(moment(departure.ExpectedDateTime).format('YYYYMMDDkkmmss'), 'YYYYMMDDkkmmss').fromNow()}`}</p>\n                  </ListGroup.Item>\n                ))\n              }\n            </ListGroup>\n            ):(\n              <ListGroup>\n                <ListGroup.Item>\n                  <p>Empty result</p>\n                </ListGroup.Item>\n              </ListGroup>\n            )}\n            \n          </div>\n          \n        )}\n      </div>\n      {isError && \n        <Alert variant=\"danger\">\n          <Alert.Heading>No data accessable</Alert.Heading>\n          <p>Try again later</p>\n        </Alert>}\n    </Container>\n  );\n}"],"sourceRoot":""}